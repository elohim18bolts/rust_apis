#+title: Some Rocket Based web APIs

* Summary
This is a collection of rust binaries that show how to use apis and web servers to retrieve data from an endpoint.

* Binaries
Run the command bellow to execute the binary:
#+begin_src bash
cargo run --bin [binary_name]
#+end_src
* Hello World
** Endpoints
- ~/hello~
  + Get response with ~content-type: text/html~
  + Display ~Hello World!!!~ string in the browser

- ~/hello_json~
  + Get response with ~content-type: application/json~
  + Diplay ~{msg: "Hello World"}~
    - Use the command ~curl http://127.0.0.1:8000/hello_json~ to see the response

* List of Users
Implements a simple crud api
** Endpoints
*** GET requests
- ~/users~
  + List all users
- ~/user/<id>~
    Request
    ~GET /user/<id>~

    Response
    ~content-type: application/json~

    If the user with id ~<id>~ exists, then a json with the user id and username returned.

    If the user with id ~<id>~ does not exists, then the json ~{status: error, msg: User not found}~ will be returned.

    Example
    #+begin_src bash
    curl http://127.0.0.1:8000/user/1
    { id: 1, username: Peter }
    #+end_src

    #+begin_src bash
    curl http://127.0.0.1:8000/user/200
    { "status": "error", "msg": "User not found"}
    #+end_src


*** POST requests
- ~/add~
  + Add a new user if the user id does not exists
  + If the user id exists this will return a json with a message saying that user already exists
  + This is a post requiest that expect a ~content-type: application/json~ header

    The following example will add the user ~Martha~ with the userid of ~134~
    #+begin_src bash
curl -X POST -H 'content-type: application/json' -d '{"id": 134, "username": "Martha"}' http://127.0.0.1:8000/add
    #+end_src

- ~/remove~

    Request

    ~POST /remove~

    ~data <userid>~

    Response

    ~content-type: application/json~

    If the user with id ~<userid>~ exists, then the json ~{"status": "Ok", "msg": "User removed"}~ will be returned.

    If the user with id ~<userid>~ does not exists, then the json ~{"status": "error", "msg": "User with id <userid> not found"}~ will be returned.

    Example

    #+begin_src bash
    > curl http://127.0.0.1:8000/remove -X POST -H 'content-type: application/json' -d '1'
    > {"status": "Ok", "msg": "User removed"}
    #+end_src

    #+begin_src bash
    > curl http://127.0.0.1:8000/remove -X POST -H 'content-type: application/json' -d '200'
    > { "status": "error", "msg": "User with id 200 not found"}
    #+end_src

- ~/update~

    Endpoints

    ~/update~

    Request

    ~POST /update~

    ~data <{ "id": <userid: usize>, "username": <username_to_update: string> }>~

    Response

    ~content-type: application/json~

    If the user with id ~<userid>~ exists, then the json ~{"id": <userid>, "username": <username_to_update>}~ will be returned. The user will also be updated with the new username.

    If the user with id ~<userid>~ does not exists, then the json ~{"status": "error", "msg": "User  not found"}~ will be returned.

    Example
    #+begin_src bash
    > curl http://127.0.0.1:8000/update -X POST -H 'content-type: application/json' -d '{"id": 1, username: "Someone Else"}'
    > {"id": 1, "username": "Someone else"}
    #+end_src

    #+begin_src bash
    > curl http://127.0.0.1:8000/update -X POST -H 'content-type: application/json' -d '{"id": 200, username: "Someone Else"}'
    > { "status": "error", "msg": "User with id 200 not found"}
    #+end_src
* Basic Authentication
References:
- [[https://en.wikipedia.org/wiki/Basic_access_authentication][Wikipedia]]
- [[https://www.3pillarglobal.com/insights/most-popular-api-authentication-methods/][3 Pillars Global]]

This program tries to implement basic http authentication.

Every time that the api caller wants to access a secret message that belongs to a specific user, it has to send a header in he request.

This header has the format ~Authorization: Basic <credentials>~.

The Authorization header field is constructed as follows:

    - The username and password are combined with a single colon (:). This means that the username itself cannot contain a colon.

    - The resulting string is encoded into an octet sequence. The character set to use for this encoding is by default unspecified, as long as it is compatible with US-ASCII, but the server may suggest use of UTF-8 by sending the charset parameter.

    - The resulting string is encoded using a variant of Base64 (+/ and with padding).

    - The authorization method and a space (e.g. "Basic ") is then prepended to the encoded string.

    - For example, if the browser uses Aladdin as the username and open sesame as the password, then the field's value is the Base64 encoding of Aladdin:open sesame, or QWxhZGRpbjpvcGVuIHNlc2FtZQ==. Then the Authorization header field will appear as:

      ~Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==~
